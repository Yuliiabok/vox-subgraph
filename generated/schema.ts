// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VClaim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VClaim entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VClaim entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VClaim", id.toString(), this);
  }

  static load(id: string): VClaim | null {
    return store.get("VClaim", id) as VClaim | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class VClaimAndStake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VClaimAndStake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VClaimAndStake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VClaimAndStake", id.toString(), this);
  }

  static load(id: string): VClaimAndStake | null {
    return store.get("VClaimAndStake", id) as VClaimAndStake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get user_address(): Bytes {
    let value = this.get("user_address");
    return value.toBytes();
  }

  set user_address(value: Bytes) {
    this.set("user_address", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class VDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VDeposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VDeposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VDeposit", id.toString(), this);
  }

  static load(id: string): VDeposit | null {
    return store.get("VDeposit", id) as VDeposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user_address(): Bytes {
    let value = this.get("user_address");
    return value.toBytes();
  }

  set user_address(value: Bytes) {
    this.set("user_address", Value.fromBytes(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class WithdrawEmergency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WithdrawEmergency entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WithdrawEmergency entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WithdrawEmergency", id.toString(), this);
  }

  static load(id: string): WithdrawEmergency | null {
    return store.get("WithdrawEmergency", id) as WithdrawEmergency | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user_address(): Bytes {
    let value = this.get("user_address");
    return value.toBytes();
  }

  set user_address(value: Bytes) {
    this.set("user_address", Value.fromBytes(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Ownership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ownership entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ownership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ownership", id.toString(), this);
  }

  static load(id: string): Ownership | null {
    return store.get("Ownership", id) as Ownership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previous_owner(): Bytes {
    let value = this.get("previous_owner");
    return value.toBytes();
  }

  set previous_owner(value: Bytes) {
    this.set("previous_owner", Value.fromBytes(value));
  }

  get new_owner(): Bytes {
    let value = this.get("new_owner");
    return value.toBytes();
  }

  set new_owner(value: Bytes) {
    this.set("new_owner", Value.fromBytes(value));
  }
}

export class VRecovered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VRecovered entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VRecovered entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VRecovered", id.toString(), this);
  }

  static load(id: string): VRecovered | null {
    return store.get("VRecovered", id) as VRecovered | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class VWithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VWithdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VWithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VWithdraw", id.toString(), this);
  }

  static load(id: string): VWithdraw | null {
    return store.get("VWithdraw", id) as VWithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user_address(): Bytes {
    let value = this.get("user_address");
    return value.toBytes();
  }

  set user_address(value: Bytes) {
    this.set("user_address", Value.fromBytes(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }
}
